#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/wait.h>

int arr[1000];
int n;

void ascending_sort(int p, int n) {
    printf("\t\t\t\tAscending sort\n");
    // Bubble sort for ascending order
    for (int i = 0; i < n-1; ++i) {
        for (int j = 0; j < n-i-1; ++j) {
            if (arr[j] > arr[j+1]) {
                int temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
    for (int i = 0; i < n; i++) {
        sleep(1); 
        printf("\t\t\t\ti=%d , p=%d , pid=%d , ppid=%d \n", arr[i], p, getpid(), getppid());
    }
}

void descending_sort(int p, int n) {
    printf("Descending sort\n");
    // Bubble sort for descending order
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-i-1; j++) {
            if (arr[j] < arr[j+1]) {
                int t = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = t;
            }
        }
    }
    for (int i = 0; i < n; i++) {
        sleep(5); 
        wait(NULL); // Wait for child process to finish
        printf("i=%d,p=%d,pid=%d,ppid=%d\n", arr[i], p, getpid(), getppid());
    }
}

int main() {
    int p = 1000;
    printf("Enter the size of array:\n");
    scanf("%d", &n);
    
    printf("Enter the elements:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    p = fork(); 

    if (p == 0) 
    {
        // Child process
        ascending_sort(p, n);
    } 
    else 
    {
        // Parent process 
        descending_sort(p, n);
    }
    return 0;
}
