#include <stdio.h>

struct process {
    int name;
    int arrival;
    int burst;
    int tat;
    int waiting;
};

int main() {
    int n;
    float avgtt = 0, avgwait = 0;

    printf("Enter number of processes: ");
    scanf("%d", &n);
    struct process arr[n];

    // Input processes' details
    for (int i = 0; i < n; i++) {
        printf("Enter process no: ");
        scanf("%d", &arr[i].name);
        printf("Enter arrival time: ");
        scanf("%d", &arr[i].arrival);
        printf("Enter burst time: ");
        scanf("%d", &arr[i].burst);
    }

    // Display the process details
    printf("pr\t arr\t burst\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t  %d\t   %d\n", arr[i].name, arr[i].arrival, arr[i].burst);
    }

    // Bubble Sort: Sort processes by arrival time
    for (int i = 0; i < n-1; i++) {
        for (int j = 0; j < n-1-i; j++) {
            if (arr[j].arrival > arr[j+1].arrival) {
                // Swap the processes
                struct process temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }

    // Display the sorted processes by arrival time
    printf("\nAscending order of arrival time (sorted by bubble sort):\n");
    printf("pr\t arr\t burst\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t  %d\t   %d\n", arr[i].name, arr[i].arrival, arr[i].burst);
    }

    // Calculate Turnaround Time (TAT) and Waiting Time (WT)
    arr[0].tat = arr[0].arrival + arr[0].burst;
    for (int i = 1; i < n; i++) {
        if (arr[i-1].tat >= arr[i].arrival) {
            arr[i].tat = arr[i-1].tat + arr[i].burst;
        } else {
            arr[i].tat = arr[i].arrival + arr[i].burst;
        }
    }

    // Calculate Waiting Time and aggregate TAT & WT for average calculation
    for (int i = 0; i < n; i++) {
        arr[i].tat = arr[i].tat - arr[i].arrival;
        arr[i].waiting = arr[i].tat - arr[i].burst;
        avgtt += arr[i].tat;
        avgwait += arr[i].waiting;
    }

    // Calculate averages
    avgtt = avgtt / n;
    avgwait = avgwait / n;

    // Display process details with TAT and WT
    printf("\npr\t arr\t burst\t tat\t wait\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t  %d\t  %d\t  %d\t  %d\n", arr[i].name, arr[i].arrival, arr[i].burst, arr[i].tat, arr[i].waiting);
    }

    // Display averages
    printf("\nAverage Turnaround Time: %f\n", avgtt);
    printf("Average Waiting Time: %f\n", avgwait);

    return 0;
}


output:
TYITB106$ cc fcfs.c
osl16@sufiyan:~/TYITB106$ ./a.out
enter no of processes: 4
enter process no: 1

enter arrival time: 0

enter burst time: 3
enter process no: 2

enter arrival time: 2

enter burst time: 3
enter process no: 3

enter arrival time: 1

enter burst time: 3
enter process no: 4

enter arrival time: 4

enter burst time: 5
pr arr burst
1  0   3
2  2   3
3  1   3
4  4   5

ascending order of arrival time sort 
pr arr burst
1  0   3
3  1   3
2  2   3
4  4   5

pr arr burst tat wait
1  0   3     3   0
3  1   3     5   2
2  2   3     7   4
4  4   5     10  5

  avg turn around time:6.250000 
avg waiting time:2.750000 osl16@sufiyan:~/TYITB106$


#ROUNDROBIN


#include <stdio.h>

int main()
{
    int processCount, currentProcess, totalProcesses, totalTime, remainingProcesses, timeQuantum;
    int totalWaitTime = 0, totalTurnaroundTime = 0;
    int arrivalTime[10], burstTime[10], remainingTime[10];
    int flag = 0;

    // Input the number of processes
    printf("Enter Total Number of Processes:\t ");
    scanf("%d", &totalProcesses);
    remainingProcesses = totalProcesses;

    // Input Arrival Time and Burst Time for each process
    for (processCount = 0; processCount < totalProcesses; processCount++)
    {
        printf("Enter Arrival Time and Burst Time for Process %d: ", processCount + 1);
        scanf("%d", &arrivalTime[processCount]);
        scanf("%d", &burstTime[processCount]);
        remainingTime[processCount] = burstTime[processCount]; // Set remaining time equal to burst time initially
    }

    // Input the Time Quantum
    printf("Enter Time Quantum:\t");
    scanf("%d", &timeQuantum);

    // Display the result headers
    printf("\n\nProcess\t| Turnaround Time | Waiting Time\n\n");

    // Start the scheduling logic
    for (totalTime = 0, processCount = 0; remainingProcesses != 0;)
    {
        // Check if the process can be completed in one round of time quantum
        if (remainingTime[processCount] <= timeQuantum && remainingTime[processCount] > 0)
        {
            totalTime += remainingTime[processCount];
            remainingTime[processCount] = 0;  // Process is now completed
            flag = 1; // Mark that the process was completed
        }
        else if (remainingTime[processCount] > 0)
        {
            remainingTime[processCount] -= timeQuantum; // Reduce remaining time of process
            totalTime += timeQuantum;
        }

        // If the process is completed, calculate its waiting and turnaround times
        if (remainingTime[processCount] == 0 && flag == 1)
        {
            remainingProcesses--; // Decrement the remaining process count
            printf("P[%d]\t|\t%d\t|\t%d\n", processCount + 1, totalTime - arrivalTime[processCount], totalTime - arrivalTime[processCount] - burstTime[processCount]);
            totalWaitTime += totalTime - arrivalTime[processCount] - burstTime[processCount];
            totalTurnaroundTime += totalTime - arrivalTime[processCount];
            flag = 0; // Reset flag after completion of the process
        }

        // Move to the next process, ensuring we respect arrival times
        if (processCount == totalProcesses - 1)
            processCount = 0; // If we are at the last process, go back to the first process
        else if (arrivalTime[processCount + 1] <= totalTime)
            processCount++; // Move to the next process if its arrival time is less than or equal to total time
        else
            processCount = 0; // If the next process hasn't arrived yet, stay at current process
    }

    // Calculate and display the average waiting and turnaround times
    printf("\nAverage Waiting Time = %f\n", totalWaitTime * 1.0 / totalProcesses);
    printf("Average Turnaround Time = %f", totalTurnaroundTime * 1.0 / totalProcesses);

    return 0;
}
